#!/usr/bin/env python3
"""
Test de validation - Finalisation de l'algorithme de recherche avanc√©
Tests des sc√©narios critiques de tol√©rance orthographique et priorisation
"""

import requests
import json
import time

# Configuration
BACKEND_URL = "http://localhost:8001"
TEST_SCENARIOS = [
    # Sc√©narios tol√©rance orthographique critiques
    ("herry potter", "Harry Potter - Distance Levenshtein: 1"),
    ("ast√©rics", "Ast√©rix - Correspondance phon√©tique"),
    ("one pece", "One Piece - Distance Levenshtein: 1"),
    ("seigneur anneaux", "Le Seigneur des Anneaux - Correspondance partielle"),
    ("game of throne", "Game of Thrones - Variations linguistiques"),
    
    # Sc√©narios exacts
    ("harry potter", "Harry Potter - Correspondance exacte"),
    ("ast√©rix", "Ast√©rix - Correspondance exacte"),
    ("one piece", "One Piece - Correspondance exacte"),
    
    # Sc√©narios partiels
    ("attack titan", "Attack on Titan - Mots partiels"),
    ("attaque titans", "Attaque des Titans - Correspondance fran√ßaise")
]

def test_search_optimization():
    """Test de l'algorithme de recherche optimis√©"""
    
    print("üîç Test de Finalisation - Algorithme de Recherche Avanc√©")
    print("="*60)
    
    results = []
    
    for query, expected in TEST_SCENARIOS:
        print(f"\nüß™ Test: '{query}' (attendu: {expected})")
        
        try:
            # Test recherche Open Library
            response = requests.get(
                f"{BACKEND_URL}/api/openlibrary/search",
                params={"q": query, "limit": 10}
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # Analyser les r√©sultats
                series_detected = False
                series_first = False
                top_results = data.get('books', [])[:3]
                
                print(f"   üìä {len(top_results)} r√©sultats re√ßus")
                
                for i, book in enumerate(top_results):
                    title = book.get('title', 'Sans titre')[:50]
                    is_series = book.get('isSeriesCard', False)
                    score = book.get('relevanceScore', book.get('confidence', 0))
                    
                    if is_series:
                        series_detected = True
                        if i == 0:
                            series_first = True
                    
                    badge = "üìö S√âRIE" if is_series else "üìñ LIVRE"
                    print(f"   {i+1}. {badge}: {title} - Score: {score}")
                
                # Validation des crit√®res
                success = True
                success_details = []
                
                if series_detected:
                    success_details.append("‚úÖ S√©rie d√©tect√©e")
                    if series_first:
                        success_details.append("‚úÖ S√©rie en position #1")
                    else:
                        success_details.append("‚ö†Ô∏è S√©rie non prioritaire")
                        success = False
                else:
                    success_details.append("‚ùå Aucune s√©rie d√©tect√©e")
                    success = False
                
                print(f"   R√©sultat: {' | '.join(success_details)}")
                
                results.append({
                    'query': query,
                    'expected': expected,
                    'success': success,
                    'series_detected': series_detected,
                    'series_first': series_first,
                    'results_count': len(top_results)
                })
                
            else:
                print(f"   ‚ùå Erreur API: {response.status_code}")
                results.append({
                    'query': query,
                    'expected': expected,
                    'success': False,
                    'error': f"HTTP {response.status_code}"
                })
                
        except Exception as e:
            print(f"   ‚ùå Erreur: {str(e)}")
            results.append({
                'query': query,
                'expected': expected,
                'success': False,
                'error': str(e)
            })
        
        time.sleep(0.5)  # √âviter surcharge API
    
    # Rapport final
    print("\n" + "="*60)
    print("üìã RAPPORT FINAL - Algorithme de Recherche Avanc√©")
    print("="*60)
    
    success_count = sum(1 for r in results if r['success'])
    total_tests = len(results)
    success_rate = (success_count / total_tests * 100) if total_tests > 0 else 0
    
    print(f"üéØ Taux de r√©ussite: {success_count}/{total_tests} ({success_rate:.1f}%)")
    print(f"‚úÖ Tests r√©ussis: {success_count}")
    print(f"‚ùå Tests √©chou√©s: {total_tests - success_count}")
    
    # D√©tail des √©checs
    failed_tests = [r for r in results if not r['success']]
    if failed_tests:
        print(f"\n‚ö†Ô∏è Tests √©chou√©s:")
        for test in failed_tests:
            reason = test.get('error', 'S√©rie non d√©tect√©e ou non prioritaire')
            print(f"   - '{test['query']}': {reason}")
    
    # Validation globale
    if success_rate >= 80:
        print(f"\nüéâ ALGORITHME VALID√â - Performance excellente ({success_rate:.1f}%)")
        return True
    elif success_rate >= 60:
        print(f"\n‚ö†Ô∏è ALGORITHME ACCEPTABLE - Performance correcte ({success_rate:.1f}%)")
        return True
    else:
        print(f"\n‚ùå ALGORITHME √Ä AM√âLIORER - Performance insuffisante ({success_rate:.1f}%)")
        return False

if __name__ == "__main__":
    success = test_search_optimization()
    exit(0 if success else 1)