#!/usr/bin/env python3
"""
PHASE B.3 - Tests Validation Backend pour Affichage Unifi√© S√©ries
Test complet du backend FastAPI modulaire avec focus sur les s√©ries
"""

import requests
import sys
import json
from datetime import datetime
import time

class PhaseB3BackendTester:
    def __init__(self, base_url="https://9fc2dc6c-4a84-459e-9440-189c3942fdb5.preview.emergentagent.com"):
        self.base_url = base_url
        self.token = None
        self.user_id = None
        self.tests_run = 0
        self.tests_passed = 0
        self.test_user = f"test_phase_b3_{int(time.time())}"
        
    def log(self, message):
        """Log avec timestamp"""
        print(f"[{datetime.now().strftime('%H:%M:%S')}] {message}")
        
    def run_test(self, name, method, endpoint, expected_status, data=None, headers=None):
        """Ex√©cuter un test API"""
        # Handle special endpoints that don't use /api prefix
        if endpoint in ['health']:
            url = f"{self.base_url}/{endpoint}"
        else:
            url = f"{self.base_url}/api/{endpoint}" if not endpoint.startswith('http') else endpoint
        test_headers = {'Content-Type': 'application/json'}
        
        if self.token:
            test_headers['Authorization'] = f'Bearer {self.token}'
        if headers:
            test_headers.update(headers)

        self.tests_run += 1
        self.log(f"üîç Test {self.tests_run}: {name}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=test_headers, timeout=30)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=test_headers, timeout=30)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=test_headers, timeout=30)
            elif method == 'DELETE':
                response = requests.delete(url, headers=test_headers, timeout=30)

            success = response.status_code == expected_status
            if success:
                self.tests_passed += 1
                self.log(f"‚úÖ PASS - Status: {response.status_code}")
                try:
                    return True, response.json()
                except:
                    return True, response.text
            else:
                self.log(f"‚ùå FAIL - Expected {expected_status}, got {response.status_code}")
                self.log(f"   Response: {response.text[:200]}")
                return False, {}

        except Exception as e:
            self.log(f"‚ùå ERROR - {str(e)}")
            return False, {}

    def test_health_check(self):
        """Test de sant√© du backend"""
        self.log("\nüè• === TEST SANT√â BACKEND ===")
        success, response = self.run_test(
            "Health Check",
            "GET", 
            "health",
            200
        )
        if success:
            self.log(f"‚úÖ Backend op√©rationnel - DB: {response.get('database', 'unknown')}")
        return success

    def test_authentication(self):
        """Test d'authentification"""
        self.log("\nüîê === TEST AUTHENTIFICATION ===")
        
        # Test cr√©ation utilisateur (qui peut retourner 200 si l'utilisateur existe d√©j√†)
        user_data = {
            "first_name": "TestPhaseB3",
            "last_name": "User",
            "email": f"{self.test_user}@test.com"
        }
        
        success, response = self.run_test(
            "Cr√©ation utilisateur",
            "POST",
            "auth/register",
            200,  # Changed from 201 to 200
            user_data
        )
        
        # Extract token if present in registration response
        if success and 'access_token' in response:
            self.token = response['access_token']
            self.user_id = response.get('user_id')
            self.log(f"‚úÖ Authentification r√©ussie via registration - Token obtenu")
            return True
        
        # If registration failed (user exists), try login directly
        self.log("‚ÑπÔ∏è Utilisateur existe d√©j√†, tentative de connexion...")
            
        # Test connexion
        login_data = {
            "first_name": "TestPhaseB3",
            "last_name": "User"
        }
        
        success, response = self.run_test(
            "Connexion utilisateur",
            "POST",
            "auth/login", 
            200,
            login_data
        )
        
        if success and 'access_token' in response:
            self.token = response['access_token']
            self.user_id = response.get('user_id')
            self.log(f"‚úÖ Authentification r√©ussie - Token obtenu")
            return True
        else:
            self.log("‚ùå √âchec authentification")
            return False

    def test_series_endpoints(self):
        """Test des endpoints s√©ries (Phase B focus)"""
        self.log("\nüìö === TEST ENDPOINTS S√âRIES (PHASE B) ===")
        
        # Test r√©cup√©ration s√©ries populaires
        success, response = self.run_test(
            "S√©ries populaires",
            "GET",
            "series/popular?category=roman&limit=10",
            200
        )
        
        if not success:
            return False
            
        series_list = response.get('series', [])
        self.log(f"‚úÖ {len(series_list)} s√©ries populaires r√©cup√©r√©es")
        
        # Test recherche de s√©ries
        success, response = self.run_test(
            "Recherche s√©ries",
            "GET", 
            "series/search?q=harry&category=roman",
            200
        )
        
        if success:
            search_results = response.get('series', [])
            self.log(f"‚úÖ {len(search_results)} s√©ries trouv√©es pour 'harry'")
        
        # Test d√©tection de s√©rie
        success, response = self.run_test(
            "D√©tection s√©rie",
            "GET",
            "series/detect?title=Harry Potter √† l'√©cole des sorciers&author=J.K. Rowling",
            200
        )
        
        if success:
            detected = response.get('detected_series', [])
            self.log(f"‚úÖ {len(detected)} s√©rie(s) d√©tect√©e(s)")
            
        return True

    def test_series_library_endpoints(self):
        """Test des endpoints biblioth√®que s√©ries (Phase B focus)"""
        self.log("\nüìñ === TEST BIBLIOTH√àQUE S√âRIES (PHASE B) ===")
        
        # Test r√©cup√©ration biblioth√®que s√©ries
        success, response = self.run_test(
            "Biblioth√®que s√©ries",
            "GET",
            "series/library",
            200
        )
        
        if success:
            # Handle both list and dict responses
            if isinstance(response, list):
                library_series = response
            else:
                library_series = response.get('series', [])
            self.log(f"‚úÖ {len(library_series)} s√©ries dans la biblioth√®que")
        
        # Test ajout s√©rie √† la biblioth√®que
        series_data = {
            "series_name": "Harry Potter Test",
            "authors": ["J.K. Rowling"],
            "category": "roman",
            "total_volumes": 7,
            "description": "S√©rie test pour Phase B",
            "cover_image_url": "",
            "first_published": "1997"
        }
        
        success, response = self.run_test(
            "Ajout s√©rie biblioth√®que",
            "POST",
            "series/library",
            201,
            series_data
        )
        
        if success:
            self.log("‚úÖ S√©rie ajout√©e √† la biblioth√®que")
            series_id = response.get('id')
            
            # Test mise √† jour s√©rie
            update_data = {
                "series_status": "reading",
                "completion_percentage": 50
            }
            
            success, response = self.run_test(
                "Mise √† jour s√©rie",
                "PUT",
                f"series/library/{series_id}",
                200,
                update_data
            )
            
            if success:
                self.log("‚úÖ S√©rie mise √† jour")
                
        return True

    def test_books_endpoints(self):
        """Test des endpoints livres"""
        self.log("\nüìï === TEST ENDPOINTS LIVRES ===")
        
        # Test r√©cup√©ration livres
        success, response = self.run_test(
            "R√©cup√©ration livres",
            "GET",
            "books?limit=10",
            200
        )
        
        if success:
            books = response.get('items', [])
            self.log(f"‚úÖ {len(books)} livres r√©cup√©r√©s")
        
        # Test ajout livre
        book_data = {
            "title": "Test Book Phase B",
            "author": "Test Author",
            "category": "roman",
            "status": "to_read",
            "description": "Livre test pour Phase B",
            "saga": "Test Series"
        }
        
        success, response = self.run_test(
            "Ajout livre",
            "POST",
            "books",
            200,  # Changed from 201 to 200
            book_data
        )
        
        if success:
            self.log("‚úÖ Livre ajout√©")
            book_id = response.get('id')
            
            # Test mise √† jour livre
            update_data = {
                "status": "reading",
                "current_page": 50
            }
            
            success, response = self.run_test(
                "Mise √† jour livre",
                "PUT",
                f"books/{book_id}",
                200,
                update_data
            )
            
            if success:
                self.log("‚úÖ Livre mis √† jour")
                
        return True

    def test_library_endpoints(self):
        """Test des endpoints biblioth√®que"""
        self.log("\nüìö === TEST ENDPOINTS BIBLIOTH√àQUE ===")
        
        # Test r√©cup√©ration biblioth√®que compl√®te
        success, response = self.run_test(
            "Biblioth√®que compl√®te",
            "GET",
            "library/complete",
            200
        )
        
        if success:
            library = response.get('library', {})
            books_count = library.get('books_count', 0)
            series_count = library.get('series_count', 0)
            self.log(f"‚úÖ Biblioth√®que: {books_count} livres, {series_count} s√©ries")
            
        return True

    def test_stats_endpoints(self):
        """Test des endpoints statistiques"""
        self.log("\nüìä === TEST ENDPOINTS STATISTIQUES ===")
        
        success, response = self.run_test(
            "Statistiques utilisateur",
            "GET",
            "stats",
            200
        )
        
        if success:
            stats = response
            self.log(f"‚úÖ Stats: {stats.get('total_books', 0)} livres total")
            
        return True

    def test_openlibrary_endpoints(self):
        """Test des endpoints Open Library"""
        self.log("\nüåê === TEST ENDPOINTS OPEN LIBRARY ===")
        
        success, response = self.run_test(
            "Recherche Open Library",
            "GET",
            "openlibrary/search?q=harry potter&limit=5",
            200
        )
        
        if success:
            results = response.get('results', [])
            self.log(f"‚úÖ {len(results)} r√©sultats Open Library")
            
        return True

    def run_all_tests(self):
        """Ex√©cuter tous les tests"""
        self.log("üöÄ === D√âBUT TESTS PHASE B.3 - BACKEND VALIDATION ===")
        self.log(f"üéØ URL Backend: {self.base_url}")
        
        # Tests s√©quentiels
        tests = [
            ("Sant√© Backend", self.test_health_check),
            ("Authentification", self.test_authentication),
            ("Endpoints S√©ries", self.test_series_endpoints),
            ("Biblioth√®que S√©ries", self.test_series_library_endpoints),
            ("Endpoints Livres", self.test_books_endpoints),
            ("Endpoints Biblioth√®que", self.test_library_endpoints),
            ("Endpoints Statistiques", self.test_stats_endpoints),
            ("Endpoints Open Library", self.test_openlibrary_endpoints)
        ]
        
        failed_tests = []
        
        for test_name, test_func in tests:
            try:
                if not test_func():
                    failed_tests.append(test_name)
            except Exception as e:
                self.log(f"‚ùå ERREUR dans {test_name}: {str(e)}")
                failed_tests.append(test_name)
        
        # R√©sum√© final
        self.log("\n" + "="*60)
        self.log("üìä === R√âSUM√â TESTS PHASE B.3 ===")
        self.log(f"‚úÖ Tests r√©ussis: {self.tests_passed}/{self.tests_run}")
        self.log(f"‚ùå Tests √©chou√©s: {len(failed_tests)}")
        
        if failed_tests:
            self.log("üî¥ Tests √©chou√©s:")
            for test in failed_tests:
                self.log(f"   - {test}")
        
        success_rate = (self.tests_passed / self.tests_run * 100) if self.tests_run > 0 else 0
        self.log(f"üìà Taux de r√©ussite: {success_rate:.1f}%")
        
        if success_rate >= 80:
            self.log("üéâ BACKEND VALIDATION R√âUSSIE - Phase B.3 OK")
            return 0
        else:
            self.log("‚ö†Ô∏è BACKEND VALIDATION PARTIELLE - Probl√®mes d√©tect√©s")
            return 1

def main():
    """Point d'entr√©e principal"""
    tester = PhaseB3BackendTester()
    return tester.run_all_tests()

if __name__ == "__main__":
    sys.exit(main())